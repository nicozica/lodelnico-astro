---
// Photo detail page with title, date, image and content
import BaseLayout from '../../layouts/BaseLayout.astro';
import type { PhotoItem } from '../../types/photoblog';
import he from 'he';

interface Props {
  photo: PhotoItem;
  prevPhoto: PhotoItem | null;
  nextPhoto: PhotoItem | null;
  fromPage: number;
}

// Format date in Spanish
function formatDateInSpanish(dateString: string): string {
  const date = new Date(dateString);
  const months = [
    'enero', 'febrero', 'marzo', 'abril', 'mayo', 'junio',
    'julio', 'agosto', 'septiembre', 'octubre', 'noviembre', 'diciembre'
  ];
  
  const day = date.getDate();
  const month = months[date.getMonth()];
  const year = date.getFullYear();
  
  return `${day} de ${month} de ${year}`;
}

// Generate static paths for all photos
export async function getStaticPaths() {
  // Import the photoblog data generated at build time
  const photoblogData = await import('../../data/photoblog.json');
  const photos = photoblogData.default as PhotoItem[];
  
  // Photos are already sorted by date DESC from the API
  return photos.map((photo, index) => {
    const prevPhoto = index > 0 ? photos[index - 1] : null;
    const nextPhoto = index < photos.length - 1 ? photos[index + 1] : null;
    
    return {
      params: { id: photo.id.toString() },
      props: {
        photo,
        prevPhoto,
        nextPhoto,
        fromPage: 1 // Default fallback
      } satisfies Props
    };
  });
}

// Get props from getStaticPaths and URL params
const { photo, prevPhoto, nextPhoto } = Astro.props as Props;

// Get the 'from' parameter from URL query string (client-side will handle this)
// For now, we'll use the default or calculate based on photo position
const photoblogData = await import('../../data/photoblog.json');
const allPhotos = photoblogData.default as PhotoItem[];
const photoIndex = allPhotos.findIndex(p => p.id === photo.id);
const calculatedFromPage = Math.ceil((photoIndex + 1) / 9); // 9 photos per page

// Format publication date
const formattedDate = formatDateInSpanish(photo.date);
const decodedTitle = he.decode(photo.title);

// Check if photo has additional text content for conditional styling
const hasText = Boolean(photo.contentHtmlNoImg && photo.contentHtmlNoImg.trim().length);
---

<BaseLayout 
  title={`${decodedTitle} - Estás en lo del Nico.`}
  description={`Photo: ${decodedTitle}`}
  showHero={false}
>
  <main class={`photo-page ${hasText ? 'has-text' : 'no-text'}`}>
    
    <!-- Mobile Navigation Bar (visible only on mobile) -->
    <div class="mobile-nav-bar">
      {prevPhoto && (
        <a 
          class="mobile-nav-btn prev"
          href={`/photo/${prevPhoto.id}/`} 
          aria-label={`Previous photo: ${prevPhoto.title}`}
        >
          <img src="/arrow-left.svg" alt="Previous" />
        </a>
      )}
      
      <a 
        class="mobile-back-link"
        href={`/${calculatedFromPage}/`} 
        id="mobile-back-link"
      >
        Back to gallery
      </a>
      
      {nextPhoto && (
        <a 
          class="mobile-nav-btn next"
          href={`/photo/${nextPhoto.id}/`} 
          aria-label={`Next photo: ${nextPhoto.title}`}
        >
          <img src="/arrow-right.svg" alt="Next" />
        </a>
      )}
    </div>

    <!-- Desktop Header (title and date above image on desktop) -->
    <header class="desktop-header">
      <h1 class="photo-title">{decodedTitle}</h1>
      <div class="photo-date">{formattedDate}</div>
    </header>

    <!-- Main Photo Container -->
    <div class="photo-container">
      <!-- Desktop Navigation Arrows (viewport-centered) -->
      <div class="desktop-nav">
        {prevPhoto && (
          <a 
            class="desktop-nav-btn prev"
            href={`/photo/${prevPhoto.id}/`} 
            aria-label={`Previous photo: ${prevPhoto.title}`}
          >
            <img src="/arrow-left.svg" alt="Previous" />
          </a>
        )}
        
        {nextPhoto && (
          <a 
            class="desktop-nav-btn next"
            href={`/photo/${nextPhoto.id}/`} 
            aria-label={`Next photo: ${nextPhoto.title}`}
          >
            <img src="/arrow-right.svg" alt="Next" />
          </a>
        )}
      </div>

      <!-- Photo Image -->
      <div class="photo-image">
        <img 
          src={photo.image} 
          alt={decodedTitle}
          width="1200"
          height="800"
        />
      </div>
    </div>

    <!-- Desktop Back Link (below image on desktop) -->
    <div class="desktop-back">
      <a 
        href={`/${calculatedFromPage}/`} 
        id="desktop-back-link"
      >
        ← Back to gallery
      </a>
    </div>

    <!-- Mobile Header (title and date below image on mobile) -->
    <header class="mobile-header">
      <h1 class="photo-title">{decodedTitle}</h1>
      <div class="photo-date">{formattedDate}</div>
    </header>

    <!-- Content section -->
    {photo.contentHtmlNoImg && photo.contentHtmlNoImg.trim() && (
      <section class="photo-content">
        <div class="prose" set:html={photo.contentHtmlNoImg} />
      </section>
    )}
  </main>
</BaseLayout>

<!-- Client-side script to handle 'from' parameter -->
<script>
  // Update back links based on 'from' URL parameter
  const urlParams = new URLSearchParams(window.location.search);
  const fromPage = urlParams.get('from');
  
  if (fromPage && /^\d+$/.test(fromPage)) {
    const desktopBackLink = document.getElementById('desktop-back-link');
    const mobileBackLink = document.getElementById('mobile-back-link');
    
    if (desktopBackLink && desktopBackLink instanceof HTMLAnchorElement) {
      desktopBackLink.href = `/${fromPage}/`;
    }
    if (mobileBackLink && mobileBackLink instanceof HTMLAnchorElement) {
      mobileBackLink.href = `/${fromPage}/`;
    }
  }
</script>
