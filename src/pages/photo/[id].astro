---
// Photo detail page with title, date, image and content
import BaseLayout from '../../layouts/BaseLayout.astro';
import type { PhotoItem } from '../../types/photoblog';

interface Props {
  photo: PhotoItem;
  prevPhoto: PhotoItem | null;
  nextPhoto: PhotoItem | null;
  fromPage: number;
}

// Format date in Spanish
function formatDateInSpanish(dateString: string): string {
  const date = new Date(dateString);
  const months = [
    'enero', 'febrero', 'marzo', 'abril', 'mayo', 'junio',
    'julio', 'agosto', 'septiembre', 'octubre', 'noviembre', 'diciembre'
  ];
  
  const day = date.getDate();
  const month = months[date.getMonth()];
  const year = date.getFullYear();
  
  return `${day} de ${month} de ${year}`;
}

// Generate static paths for all photos
export async function getStaticPaths() {
  // Import the photoblog data generated at build time
  const photoblogData = await import('../../data/photoblog.json');
  const photos = photoblogData.default as PhotoItem[];
  
  // Photos are already sorted by date DESC from the API
  return photos.map((photo, index) => {
    const prevPhoto = index > 0 ? photos[index - 1] : null;
    const nextPhoto = index < photos.length - 1 ? photos[index + 1] : null;
    
    return {
      params: { id: photo.id.toString() },
      props: {
        photo,
        prevPhoto,
        nextPhoto,
        fromPage: 1 // Default fallback
      } satisfies Props
    };
  });
}

// Get props from getStaticPaths and URL params
const { photo, prevPhoto, nextPhoto, fromPage: defaultFromPage } = Astro.props as Props;

// Get the 'from' parameter from URL query string (client-side will handle this)
// For now, we'll use the default or calculate based on photo position
const photoblogData = await import('../../data/photoblog.json');
const allPhotos = photoblogData.default as PhotoItem[];
const photoIndex = allPhotos.findIndex(p => p.id === photo.id);
const calculatedFromPage = Math.ceil((photoIndex + 1) / 9); // 9 photos per page

// Format publication date
const formattedDate = formatDateInSpanish(photo.date);
---

<BaseLayout 
  title={`${photo.title} - Lo del Nico`}
  description={`Photo: ${photo.title}`}
>
  <main class="photo-detail">
    <div class="content-container">
      <!-- Header with title and date -->
      <header class="header">
        <h1 class="title">{photo.title}</h1>
        <p class="date">{formattedDate}</p>
        
        <!-- Back to Gallery Link -->
        <nav class="back-nav">
          <a 
            href={`/${calculatedFromPage}`} 
            class="back-link"
            id="back-link"
          >
            ← Back to gallery
          </a>
        </nav>
      </header>

      <!-- Image container with navigation arrows -->
      <div class="image-section">
        <!-- Previous photo arrow -->
        {prevPhoto && (
          <a 
            href={`/photo/${prevPhoto.id}`} 
            class="nav-arrow nav-prev"
            aria-label={`Previous photo: ${prevPhoto.title}`}
          >
            ←
          </a>
        )}

        <!-- Main image -->
        <div class="image-container">
          <img 
            src={photo.image} 
            alt={photo.title}
            class="photo-image"
            width="1200"
            height="800"
          />
        </div>

        <!-- Next photo arrow -->
        {nextPhoto && (
          <a 
            href={`/photo/${nextPhoto.id}`} 
            class="nav-arrow nav-next"
            aria-label={`Next photo: ${nextPhoto.title}`}
          >
            →
          </a>
        )}
      </div>

      <!-- Content section -->
      {photo.contentHtmlNoImg && photo.contentHtmlNoImg.trim() && (
        <section class="content">
          <div class="prose" set:html={photo.contentHtmlNoImg} />
        </section>
      )}
    </div>
  </main>
</BaseLayout>

<!-- Client-side script to handle 'from' parameter -->
<script>
  // Update back link based on 'from' URL parameter
  const urlParams = new URLSearchParams(window.location.search);
  const fromPage = urlParams.get('from');
  
  if (fromPage && /^\d+$/.test(fromPage)) {
    const backLink = document.getElementById('back-link');
    if (backLink && backLink instanceof HTMLAnchorElement) {
      backLink.href = `/${fromPage}`;
    }
  }
</script>

<style>
  .photo-detail {
    min-height: 100vh;
    padding: 2rem;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .content-container {
    max-width: 800px;
    width: 100%;
    margin: 0 auto;
  }

  /* Header */
  .header {
    text-align: center;
    margin-bottom: 2rem;
  }

  .title {
    font-size: 2.25rem;
    font-weight: 700;
    color: #1f2937;
    margin: 0 0 0.5rem 0;
    line-height: 1.2;
  }

  .date {
    font-size: 1rem;
    color: #6b7280;
    margin: 0 0 1.5rem 0;
    font-style: italic;
  }

  .back-nav {
    margin-bottom: 1rem;
  }

  .back-link {
    display: inline-block;
    color: #6b7280;
    text-decoration: none;
    font-size: 0.9rem;
    transition: color 0.2s ease;
  }

  .back-link:hover {
    color: #374151;
  }

  /* Image section with navigation */
  .image-section {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 2rem;
    gap: 1rem;
  }

  .image-container {
    flex: 1;
    display: flex;
    justify-content: center;
    max-width: 100%;
  }

  .photo-image {
    max-width: 100%;
    height: auto;
    object-fit: contain;
    max-height: 70vh;
    /* Remove all shadows and borders */
    box-shadow: none;
    border: none;
    border-radius: 0;
  }

  /* Navigation arrows */
  .nav-arrow {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 3rem;
    height: 3rem;
    background: rgba(0, 0, 0, 0.05);
    color: #374151;
    text-decoration: none;
    border-radius: 50%;
    font-size: 1.5rem;
    font-weight: 700;
    transition: all 0.2s ease;
    flex-shrink: 0;
  }

  .nav-arrow:hover {
    background: rgba(0, 0, 0, 0.1);
    color: #1f2937;
    transform: scale(1.05);
  }

  .nav-prev {
    order: -1;
  }

  .nav-next {
    order: 1;
  }

  /* Content section */
  .content {
    max-width: 100%;
    margin: 0;
  }

  .prose {
    color: #374151;
    line-height: 1.7;
    font-size: 1rem;
  }

  /* Safety rule: hide any remaining images in content */
  .prose img {
    display: none;
  }

  .prose p {
    margin-bottom: 1.25rem;
  }

  .prose p:last-child {
    margin-bottom: 0;
  }

  .prose h1, .prose h2, .prose h3, .prose h4, .prose h5, .prose h6 {
    color: #1f2937;
    font-weight: 600;
    margin-top: 2rem;
    margin-bottom: 1rem;
    line-height: 1.3;
  }

  .prose h1 {
    font-size: 1.8rem;
  }

  .prose h2 {
    font-size: 1.5rem;
  }

  .prose h3 {
    font-size: 1.25rem;
  }

  .prose h4, .prose h5, .prose h6 {
    font-size: 1.1rem;
  }

  .prose ul, .prose ol {
    margin-bottom: 1.25rem;
    padding-left: 1.5rem;
  }

  .prose li {
    margin-bottom: 0.5rem;
  }

  .prose ul {
    list-style-type: disc;
  }

  .prose ol {
    list-style-type: decimal;
  }

  .prose blockquote {
    border-left: 4px solid #e5e7eb;
    padding-left: 1rem;
    margin: 1.5rem 0;
    font-style: italic;
    color: #6b7280;
  }

  .prose a {
    color: #3b82f6;
    text-decoration: underline;
  }

  .prose a:hover {
    color: #1d4ed8;
  }

  .prose strong {
    font-weight: 600;
    color: #1f2937;
  }

  .prose em {
    font-style: italic;
  }

  .prose code {
    background: #f3f4f6;
    padding: 0.2rem 0.4rem;
    border-radius: 3px;
    font-size: 0.9em;
    color: #e11d48;
    font-family: ui-monospace, SFMono-Regular, 'SF Mono', Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace;
  }

  .prose pre {
    background: #f3f4f6;
    padding: 1rem;
    border-radius: 6px;
    overflow-x: auto;
    margin: 1.25rem 0;
  }

  .prose pre code {
    background: none;
    padding: 0;
    color: #374151;
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .photo-detail {
      padding: 1rem;
    }

    .title {
      font-size: 1.75rem;
    }

    .date {
      font-size: 0.9rem;
    }

    .image-section {
      gap: 0.5rem;
    }

    .nav-arrow {
      width: 2.5rem;
      height: 2.5rem;
      font-size: 1.25rem;
    }

    .prose {
      font-size: 0.95rem;
    }

    .prose h1 {
      font-size: 1.6rem;
    }

    .prose h2 {
      font-size: 1.3rem;
    }

    .prose h3 {
      font-size: 1.15rem;
    }
  }

  @media (max-width: 480px) {
    .title {
      font-size: 1.5rem;
    }
    
    .date {
      font-size: 0.85rem;
    }

    .nav-arrow {
      width: 2rem;
      height: 2rem;
      font-size: 1rem;
    }
  }
</style>
